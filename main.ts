import { parse } from 'https://deno.land/std/flags/mod.ts'
import { walk, WalkEntry } from 'https://deno.land/std/fs/walk.ts'
// import { walk } from 'https://deno.land/std/fs/mod.ts'
import { camelCase, paramCase, pascalCase } from 'https://deno.land/x/case/mod.ts'

const parsedArgs = parse(Deno.args)
console.log({parsedArgs})
console.log('cwd: ', Deno.cwd())

const walkDir = `${Deno.cwd()}${parsedArgs.walkDir}/`
const outputDir: string = parsedArgs.outputDir ?? ''
const fileName: string = parsedArgs.fileName ?? 'svgIconSprite'
const objectName: string = parsedArgs.objectName ?? 'svgIconSprite'

const comment = `// This file is auto generated by Deno
// Do not manually modify this file.`

const encoder = new TextEncoder()

const genProp = (entry: WalkEntry, isImg: boolean) => {
    if (isImg) {
        const name = entry.path.replace(walkDir, '')
        const key = name.replaceAll('/', '-')

        return `'${camelCase(key)}': '${name}',`
    }

    const name =
        entry.path.replace(walkDir, '')
        .replaceAll('/', '-')

    const nameNoExt = name.lastIndexOf('.') !== -1
        ? name.substring(0, name.lastIndexOf('.'))
        : name

    return `'${camelCase(nameNoExt)}': '${nameNoExt}',`

}

const genTs = async (outputPath: string) => {
    const targetExts = parsedArgs.img
        ? ['jpg', 'jpeg', 'png', 'webp', 'avif', 'gif']
        : ['svg']

    await Deno.writeFile(
        outputPath,
        encoder.encode(`${comment}\nexport const ${objectName} = {`)
    )

    for await(const entry of walk(
        walkDir,
        { exts: targetExts }
    )) {
        if (entry.isFile) {
            const data = `\n    ${genProp(entry, parsedArgs.img)}`

            await Deno.writeFile(
                outputPath,
                encoder.encode(data),
                { append: true }
            )
        }
    }

    const lastData = `
} as const

export type ${pascalCase(objectName)} = typeof ${objectName}[keyof typeof ${objectName}]
`

    await Deno.writeFile(
        outputPath,
        encoder.encode(lastData),
        { append: true }
    )
}

// const genDTs = async (outputPath: string) => {
//     const data = `${comment}
// import { ${objectName} } from './${fileName}'
// declare type ${pascalCase(objectName)} = typeof ${objectName}[keyof typeof ${objectName}]
// `

//     await Deno.writeFile(
//         outputPath,
//         encoder.encode(data)
//     )
// }

await genTs(`${Deno.cwd()}${outputDir}/${fileName}.ts`)
// await genDTs(`${Deno.cwd()}${outputDir}/${paramCase(fileName)}.d.ts`)
